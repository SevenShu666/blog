(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{413:function(t,r,e){"use strict";e.r(r);var a=e(10),s=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"nest-js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nest-js"}},[t._v("#")]),t._v(" nest.js")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://docs.nestjs.cn/9/introduction",target:"_blank",rel:"noopener noreferrer"}},[t._v("nest.js 中文官网"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/qq1195566313/category_11844396.html?spm=1001.2014.3001.5482",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),r("p",[t._v("Nest 是一个用于构建高效，可扩展的 "),r("a",{attrs:{href:"http://nodejs.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js"),r("OutboundLink")],1),t._v(" 服务器端应用程序的框架。它使用渐进式 JavaScript，内置并完全支持 "),r("a",{attrs:{href:"https://www.tslang.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript"),r("OutboundLink")],1),t._v("（但仍然允许开发人员使用纯 JavaScript 编写代码）并结合了 OOP（面向对象编程），FP（函数式编程）和 FRP（函数式响应编程）的元素。")]),t._v(" "),r("p",[t._v("在底层，Nest 使用强大的 HTTP Server 框架，如 Express（默认）和 Fastify。Nest 在这些框架之上提供了一定程度的抽象，同时也将其 API 直接暴露给开发人员。这样可以轻松使用每个平台的无数第三方模块。")]),t._v(" "),r("h2",{attrs:{id:"内置框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内置框架"}},[t._v("#")]),t._v(" 内置框架")]),t._v(" "),r("h3",{attrs:{id:"express-默认"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express-默认"}},[t._v("#")]),t._v(" express(默认)")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.expressjs.com.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("express 文档"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("能够快速构建服务端应用程序，容易上手")]),t._v(" "),r("h3",{attrs:{id:"fastify"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fastify"}},[t._v("#")]),t._v(" Fastify")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.fastify.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fastify 文档"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("快速并且低开销的 web 框架")]),t._v(" "),r("h2",{attrs:{id:"middleware"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[t._v("#")]),t._v(" Middleware")]),t._v(" "),r("p",[t._v("Nest.js 基于 Express 自然可以使用中间件，但是做了进一步的细分，分为全局中间件和路由中间件：")]),t._v(" "),r("ul",[r("li",[t._v("全局中间件：在请求之前和之后加入一些处理逻辑，每个请求都会走到这里")]),t._v(" "),r("li",[t._v("路由中间件：针对某个路由，范围更小一点")])]),t._v(" "),r("h2",{attrs:{id:"guard"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#guard"}},[t._v("#")]),t._v(" Guard")]),t._v(" "),r("p",[t._v("Guard 是路由守卫的意思，可以用于调用某个 Controller 之前判断权限，返回 true 或者 false 来决定是否放行，Guard 可以抽离路由的访问控制逻辑，但是不能对请求、响应做修改，这种逻辑可以使用 Interceptor，")]),t._v(" "),r("p",[t._v("也分为全局守卫和路由守卫。")]),t._v(" "),r("h2",{attrs:{id:"interceptor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#interceptor"}},[t._v("#")]),t._v(" Interceptor")]),t._v(" "),r("p",[t._v("Interceptor 是拦截器的意思，可以在目标 Controller 方法前后加入一些逻辑")]),t._v(" "),r("h2",{attrs:{id:"pipe"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pipe"}},[t._v("#")]),t._v(" Pipe")]),t._v(" "),r("p",[t._v("Pipe 是管道的意思，用来对参数做一些验证和转换")]),t._v(" "),r("h2",{attrs:{id:"exceptionfilter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#exceptionfilter"}},[t._v("#")]),t._v(" ExceptionFilter")]),t._v(" "),r("p",[t._v("ExceptionFilter 可以对抛出的异常做处理，返回对应的响应")]),t._v(" "),r("h2",{attrs:{id:"调用顺序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#调用顺序"}},[t._v("#")]),t._v(" 调用顺序")]),t._v(" "),r("p",[t._v("进入路由会先调用 Guard，判断有没有权限，如果没有权限，这里就抛异常了，抛出的 HttpException 会被 ExceptionFilter 处理。如果有权限，就会调用拦截器，拦截器一个个的调用，最后会调用 controller 的方法，调用 controller 的方法之前，会使用 pipe 对参数做处理。")])])}),[],!1,null,null,null);r.default=s.exports}}]);