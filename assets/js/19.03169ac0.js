(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{297:function(t,n,a){"use strict";a.r(n);var i=a(10),e=Object(i.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复杂度"}},[t._v("#")]),t._v(" 复杂度")]),t._v(" "),n("h2",{attrs:{id:"时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),n("p",[t._v("一个算法的时间复杂度反映了程序运行从开始到结束所需要的时间。把算法中基本操作重复执行的次数（频度）作为算法的时间复杂度。\n没有循环语句，记作 O(1)，也称为常数阶。只有一重循环，则算法的基本操作的执行频度与问题规模 n 呈线性增大关系，记作 O（n），也叫线性阶")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("O(1): Constant Complexity: Constant 常数复杂度")])]),t._v(" "),n("li",[n("p",[t._v("O(log n): Logarithmic Complexity: 对数复杂度")])]),t._v(" "),n("li",[n("p",[t._v("O(n): Linear Complexity: 线性时间复杂度")])]),t._v(" "),n("li",[n("p",[t._v("O(n^2): N square Complexity 平方")])]),t._v(" "),n("li",[n("p",[t._v("O(n^3): N square Complexity 立方")])]),t._v(" "),n("li",[n("p",[t._v("O(2^n): Exponential Growth 指数")])]),t._v(" "),n("li",[n("p",[t._v("O(n!): Factorial 阶乘")])])]),t._v(" "),n("h2",{attrs:{id:"空间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),n("p",[t._v("一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。\n一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。")]),t._v(" "),n("p",[t._v("O(1): Constant Complexity: Constant 常数复杂度\nO(n): Linear Complexity: 线性时间复杂度\n"),n("Valine")],1)])}),[],!1,null,null,null);n.default=e.exports}}]);