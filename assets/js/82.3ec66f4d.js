(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{360:function(v,_,e){"use strict";e.r(_);var i=e(10),t=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"html-知识归纳"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#html-知识归纳"}},[v._v("#")]),v._v(" HTML 知识归纳")]),v._v(" "),_("h2",{attrs:{id:"一、标准模式和兼容模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、标准模式和兼容模式"}},[v._v("#")]),v._v(" 一、标准模式和兼容模式")]),v._v(" "),_("ul",[_("li",[v._v("标准模式的渲染方式和 JS 引擎的解析方式都是以该浏览器支持的最高标准运行")]),v._v(" "),_("li",[v._v("在兼容模式中，页面以宽松的向后兼容的方式显示模拟老的浏览器防止站点无法工作")])]),v._v(" "),_("h2",{attrs:{id:"二、defer-和-async-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、defer-和-async-的区别"}},[v._v("#")]),v._v(" 二、defer 和 async 的区别")]),v._v(" "),_("p",[v._v("相同点：这两个都是用来异步加载脚本的")]),v._v(" "),_("p",[v._v("区别：")]),v._v(" "),_("ol",[_("li",[v._v("async 属性的脚本会在下载完成后立即执行，同时会在 load 事件之前执行， 而且因为是下载完成之后立即执行，所以多个 async 的脚本不是按照顺序执行")]),v._v(" "),_("li",[v._v("defer 属性的脚本是在文档解析完成之后，DOMContentLoaded 事件之前执行，而且多个 defer 是按照原来的顺序执行的")])]),v._v(" "),_("h2",{attrs:{id:"三、domcontentloaded-和-load-区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、domcontentloaded-和-load-区别"}},[v._v("#")]),v._v(" 三、DOMContentLoaded 和 Load 区别")]),v._v(" "),_("ul",[_("li",[v._v("DOMContentLoaded:文档被完全加载和解析完成之后执行")]),v._v(" "),_("li",[v._v("Load:页面被完全加载之后执行，也就是 html、css、js、图片等资源已经完全加载了才会触发 load 事件")])]),v._v(" "),_("h2",{attrs:{id:"四、html-语义化的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、html-语义化的理解"}},[v._v("#")]),v._v(" 四、html 语义化的理解")]),v._v(" "),_("ol",[_("li",[v._v("对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效的信息，有利于 SEO")]),v._v(" "),_("li",[v._v("对开发者友好，使用语义标签增强了可读性，结构更加清晰，便于团队的开发和维护")])]),v._v(" "),_("h2",{attrs:{id:"五、link-和-import-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、link-和-import-有什么区别"}},[v._v("#")]),v._v(" 五、link 和@import 有什么区别")]),v._v(" "),_("ol",[_("li",[v._v("从属关系区别，@import 是 css 提供的语法规则，只能用于导入样式表；link 是 html 的标签，不仅可以用来加载 css 文件，也可以做其他操作，比如引入网站图标")]),v._v(" "),_("li",[v._v("加载顺序的区别。加载页面时，link 引入的 css 被同时加载，而@import 引入的 css 会在页面加载完毕之后被加载")])]),v._v(" "),_("h2",{attrs:{id:"六、从浏览器地址栏输入url到显示页面的步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#六、从浏览器地址栏输入url到显示页面的步骤"}},[v._v("#")]),v._v(" 六、从浏览器地址栏输入url到显示页面的步骤")]),v._v(" "),_("ol",[_("li",[v._v("在浏览器地址栏输入url")]),v._v(" "),_("li",[v._v("浏览器去查看是否有缓存，缓存分为强缓存和协商缓存\n"),_("ol",[_("li",[v._v("首先检查强缓存，HTTP1.0使用的是Expires，HTTP1.1使用的是Cache-Control")]),v._v(" "),_("li",[v._v("Expires过期时间，时间是相对于服务器时间而言，存在于服务端返回的响应头中，在这个时间过期之前都可以直接从缓存中获取数据，无需再次请求。"),_("strong",[v._v("问题：服务器的时间和浏览器的时间可能不一致")])]),v._v(" "),_("li",[v._v("Cache-Control过期时长，设置max-age，更高优先级")]),v._v(" "),_("li",[v._v("没有命中强缓存，就会去检查协商缓存，协商缓存每次都会发起请求去到服务端验证，HTTP1.0使用的Last-modified，HTTP1.1使用的是Etag")]),v._v(" "),_("li",[v._v("Last-modified就是文件的最后的修改时间，获取数据时服务端会在响应头中添加Last-modified，浏览器在验证协商缓存时就会发起请求在请求头添加if-Modified-Since属性，属性值就是上次返回的Last-modified。服务端就会拿这个值和资源的最后修改时间做比对，如果资源没有修改，就会返回304状态码，让客户端使用本地资源，否则返回最新的资源。"),_("strong",[v._v("Last-modified的最后修改时间只能精确到秒级，如果资源在1秒内被多次改动，那么就会导致资源修改了最后修改时间没变，导致资源命中不准确")])]),v._v(" "),_("li",[v._v("Etag资源唯一标识，浏览器发起请求会将上次服务端返回的响应头中Etag值放入到请求头If-None-Match中，服务器拿到If-None-Match就会于资源的Etag进行比对，一致就会返回304，告诉浏览器直接使用缓存。如果不一样，就返回新的资源")])])]),v._v(" "),_("li",[v._v("DNS域名解析，找到真实的IP地址")]),v._v(" "),_("li",[v._v("通过三次握手，建立起TCP连接，然后发起HTTP请求")]),v._v(" "),_("li",[v._v("服务器接收到请求，进行解析，获取相应数据返回给浏览器")]),v._v(" "),_("li",[v._v("浏览器接收到数据后，通过四次挥手关闭TCP连接或者保留重用")]),v._v(" "),_("li",[v._v("如果资源可以缓存，就进行缓存")]),v._v(" "),_("li",[v._v("浏览器进行资源解析，解析HTML文档，构建DOM树，解析css文件，构建CSSOM树。通过这两个树去构建渲染树")]),v._v(" "),_("li",[v._v("js的解析，遇到async的script，下载脚本和解析文档同时进行，下载完成就执行，没有顺序。遇到defer的script，下载脚本和解析文档同时进行，会按照在文档出现的顺序进行执行")]),v._v(" "),_("li",[v._v("最后将渲染树渲染成屏幕的像素")])]),v._v(" "),_("h2",{attrs:{id:"七、前端seo"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#七、前端seo"}},[v._v("#")]),v._v(" 七、前端SEO")]),v._v(" "),_("ol",[_("li",[v._v("合理的title、description、keywords")]),v._v(" "),_("li",[v._v("语义化的HTML代码")]),v._v(" "),_("li",[v._v("重要的内容放在最前")]),v._v(" "),_("li",[v._v("重要内容不要用js输出")]),v._v(" "),_("li",[v._v("少用iframe")]),v._v(" "),_("li",[v._v("非装饰图片必须加alt")]),v._v(" "),_("li",[v._v("提高网站速度")])]),v._v(" "),_("h2",{attrs:{id:"八、语义化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#八、语义化"}},[v._v("#")]),v._v(" 八、语义化")]),v._v(" "),_("ul",[_("li",[v._v("让页面的内容结构化，便于浏览器、搜索引擎解析")]),v._v(" "),_("li",[v._v("在没有css情况下，也以一种文档格式显示")]),v._v(" "),_("li",[v._v("便于搜索引擎抓取，有利于SEO")]),v._v(" "),_("li",[v._v("便于维护人员阅读和理解")])]),v._v(" "),_("h2",{attrs:{id:"九、浏览器内核"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#九、浏览器内核"}},[v._v("#")]),v._v(" 九、浏览器内核")]),v._v(" "),_("p",[v._v("主要分为两个部分：渲染引擎和js引擎")]),v._v(" "),_("ul",[_("li",[v._v("渲染引擎：负责解析网站的HTML、XML、图像等内容，对网页进行布局、样式计算、绘制等任务，最后渲染成屏幕像素展示给用户。不同的浏览器内核对网页的解析和渲染方式可能会有差异，因此不同浏览器的渲染效果也会有不同。\n"),_("ul",[_("li",[v._v("webkit：主要用于safari和chrome浏览器")]),v._v(" "),_("li",[v._v("gecko：主要用于firefox浏览器")]),v._v(" "),_("li",[v._v("Trident：主要用于旧版的IE浏览器")]),v._v(" "),_("li",[v._v("Blink：基于webkit，用于chrome、Opera")]),v._v(" "),_("li",[v._v("presto：用于之前的Opera")])])]),v._v(" "),_("li",[v._v("js引擎：负责解析和执行网页中的js代码，实现网页的动态交互和功能。不同浏览器的 JavaScript 引擎性能和特性也可能存在差异。\n"),_("ul",[_("li",[v._v("v8：用于chrome和Opera浏览器，具有高性能和快速执行速度")]),v._v(" "),_("li",[v._v("spiderMonkey：用于firefox浏览器")]),v._v(" "),_("li",[v._v("javascriptCore：用于safari浏览器")])])])]),v._v(" "),_("h2",{attrs:{id:"十、html5"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十、html5"}},[v._v("#")]),v._v(" 十、html5")]),v._v(" "),_("ul",[_("li",[v._v("新增功能\n"),_("ul",[_("li",[v._v("新增选择器："),_("code",[v._v("document.querySelector")]),v._v("、"),_("code",[v._v("document.querySelectorAll")])]),v._v(" "),_("li",[v._v("拖拽释放("),_("code",[v._v("Drag and drop")]),v._v(")API")]),v._v(" "),_("li",[v._v("媒体播放"),_("code",[v._v("video")]),v._v("和"),_("code",[v._v("audio")])]),v._v(" "),_("li",[v._v("本地存储"),_("code",[v._v("localStorage")]),v._v("和"),_("code",[v._v("sessionStorage")])]),v._v(" "),_("li",[v._v("离线应用"),_("code",[v._v("manifest")])]),v._v(" "),_("li",[v._v("桌面通知"),_("code",[v._v("Notifications")])]),v._v(" "),_("li",[v._v("语义化的标签"),_("code",[v._v("article")]),v._v("、"),_("code",[v._v("footer")]),v._v("、"),_("code",[v._v("header")]),v._v("、"),_("code",[v._v("nav")]),v._v("、"),_("code",[v._v("section")])]),v._v(" "),_("li",[v._v("增强表单控件"),_("code",[v._v("calendar")]),v._v("、"),_("code",[v._v("date")]),v._v("、"),_("code",[v._v("email")]),v._v("、"),_("code",[v._v("time")]),v._v("、"),_("code",[v._v("url")]),v._v("、"),_("code",[v._v("search")])]),v._v(" "),_("li",[v._v("地理位置"),_("code",[v._v("Geolocation")])]),v._v(" "),_("li",[v._v("多任务"),_("code",[v._v("webworker")])]),v._v(" "),_("li",[v._v("全双工通信协议 "),_("code",[v._v("websocket")])]),v._v(" "),_("li",[v._v("历史管理"),_("code",[v._v("history")])]),v._v(" "),_("li",[v._v("跨域资源共享(CORS)"),_("code",[v._v("Access-Control-Allow-Origin")])]),v._v(" "),_("li",[v._v("页面可见性改变事件"),_("code",[v._v("visibilitychange")])]),v._v(" "),_("li",[v._v("跨窗口通信"),_("code",[v._v("PostMessage")])]),v._v(" "),_("li",[_("code",[v._v("Form Data")]),v._v("对象")]),v._v(" "),_("li",[v._v("绘画"),_("code",[v._v("canvas")])])])]),v._v(" "),_("li",[v._v("移除的元素\n"),_("ul",[_("li",[v._v("纯表现元素："),_("code",[v._v("basefont")]),v._v("、"),_("code",[v._v("big")]),v._v("、"),_("code",[v._v("center")]),v._v("、"),_("code",[v._v("font")]),v._v("、"),_("code",[v._v("s")]),v._v("、"),_("code",[v._v("strike")]),v._v("、"),_("code",[v._v("tt")]),v._v("、"),_("code",[v._v("u")])]),v._v(" "),_("li",[v._v("对可用性产生负面影响的元素："),_("code",[v._v("frame")]),v._v("、"),_("code",[v._v("frameset")]),v._v("、"),_("code",[v._v("noframes")])])])])]),v._v(" "),_("h2",{attrs:{id:"十一、html5的离线存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十一、html5的离线存储"}},[v._v("#")]),v._v(" 十一、HTML5的离线存储")]),v._v(" "),_("ul",[_("li",[v._v("在用户没有联网时，可以正常访问网站或应用，在用户联网时，更新用户设备上的缓存文件")]),v._v(" "),_("li",[v._v("原理："),_("code",[v._v("HTML5")]),v._v("的离线存储是基于一个新建的.appcache文件的缓存机制，通过这个文件上的解析清单离线存储资源，这些资源会像"),_("code",[v._v("cookie")]),v._v("一样被保存下来。")]),v._v(" "),_("li",[v._v("使用\n"),_("ul",[_("li",[v._v("页面头部加入一个"),_("code",[v._v("manifest")]),v._v("属性")]),v._v(" "),_("li",[v._v("在"),_("code",[v._v("cache.manifest")]),v._v("文件编写离线存储的资源")]),v._v(" "),_("li",[v._v("在离线状态时，操作"),_("code",[v._v("window.applicationCache")]),v._v("进行需求实现")])])]),v._v(" "),_("li",[v._v("管理：\n"),_("ul",[_("li",[v._v("在线的情况下，浏览器发现"),_("code",[v._v("html")]),v._v("头部有"),_("code",[v._v("manifest")]),v._v("属性，它会请求"),_("code",[v._v("manifest")]),v._v("文件，如果是第一次访问"),_("code",[v._v("app")]),v._v("，那么浏览器就会根据"),_("code",[v._v("manifest")]),v._v("文件的内容下载相应的资源并进行离线存储。如果已经访问过"),_("code",[v._v("app")]),v._v("并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后会对新的"),_("code",[v._v("manifest")]),v._v("文件和旧的"),_("code",[v._v("manifest")]),v._v("文件，如果文件没有发生变化，就不做任何操作，如果文件改变了，那么就会重新下载文件中资源并离线存储。")])])])]),v._v(" "),_("Valine")],1)}),[],!1,null,null,null);_.default=t.exports}}]);