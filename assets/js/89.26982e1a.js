(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{369:function(t,a,s){"use strict";s.r(a);var r=s(10),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"贪心算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),a("h2",{attrs:{id:"贪心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪心"}},[t._v("#")]),t._v(" 贪心")]),t._v(" "),a("p",[t._v("贪心：选择每一阶段的局部最优，然后达到全局最优")]),t._v(" "),a("h2",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),a("p",[t._v("贪心算法没有套路，最好的策略是举反例，如果想不到反例，就可以试一试贪心")]),t._v(" "),a("h2",{attrs:{id:"解题步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解题步骤"}},[t._v("#")]),t._v(" 解题步骤")]),t._v(" "),a("ol",[a("li",[t._v("将问题分为若干个子问题")]),t._v(" "),a("li",[t._v("找出适合的贪心策略")]),t._v(" "),a("li",[t._v("求解每一个子问题的最优解")]),t._v(" "),a("li",[t._v("从局部最优解到全局最优解")])])])}),[],!1,null,null,null);a.default=v.exports}}]);